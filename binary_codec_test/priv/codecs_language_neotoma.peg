% header
% signature
% variables

file <- head:header body:(crlfs packet)* / ''
`
case Node of
  [] -> [];
  [""] -> [];
  _ ->
    Head = proplists:get_value(head, Node),
    Tail = [R || [_,R] <- proplists:get_value(body, Node)],
    [Head|Tail]
end
`;

header <- module crlf version
`
  [module, version]
`;

module <- 'module : #3F'
`
  {module, 126}
`;

version <- 'version : 0.3'
`
  {version, 0, 3}
`;

packet <- signature
`
  Node
`;

signature <- packet_name '(' params:(!')' .)? ')'
`
  Node
`;

packet_name <- 'connect' / 'listen'
`
  Node
`;

crlfs <- crlf (crlf)*
crlf <- [\r]? [\n] ~;

%row <- head:field tail:(field_sep field)* / ''
%`
%case Node of
%  [] -> [];
%  [""] -> [];
%  _ ->
%    Head = proplists:get_value(head, Node),
%    Tail = [F || [_,F] <- proplists:get_value(tail, Node)],
%    [Head|Tail]
%end
%`;
%field <- quoted_field / (!field_sep !crlf .)* `iolist_to_binary(Node)`;
%quoted_field <- '"' string:('""' / (!'"' .))* '"'
%`
%  String = proplists:get_value(string, Node),
%  re:replace(String, "[\"]{2}", "\"",[global, {return, binary}])
%`;
%field_sep <- ',' ~;
