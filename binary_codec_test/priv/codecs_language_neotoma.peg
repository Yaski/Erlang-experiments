file <- head:header packets:(crlf packet)* / ''
`
case Node of
  [] -> [];
  [""] -> [];
  _ ->
    [Head1, Head2] = proplists:get_value(head, Node),
    Tail = [R || [_,R] <- proplists:get_value(packets, Node)],
    [Head1, Head2, {packets, Tail}]
end
`;

header <- module crlf version
`
  [Val1, _, Val2] = Node,
  [Val1, Val2]
`;

module <- 'module' sp? ':' sp? hex:('#' [0-9A-F]+)
`
  HexVal = binary_to_list(iolist_to_binary(proplists:get_value(hex, Node))),
  Hex = erlang:list_to_integer(string:substr(HexVal, 2), 16),
  {module, Hex}
`;

version <- 'version : ' major:digit minor:('.' digit)?
`
  [Major] = proplists:get_value(major, Node),
  [_ | [[Minor]]] = proplists:get_value(minor, Node),
  {version, Major, Minor}
`;

packet <- signature variables:(crlf variable)*
`
  [[Name, Params] | _Tail] = Node,

  Vars = [R || [_,R] <- proplists:get_value(variables, Node)],
  {packet, [Name, Params, {variables, Vars}]}
`;

signature <- name:label '(' params:(!')' .)* ')'
`
  [
    {name, proplists:get_value(name, Node)},
    {params, iolist_to_binary(proplists:get_value(params, Node))}
  ]
`;

variable <- sp? name:label sp? ':' sp? type:type 
`
  {variable, [
    {name, proplists:get_value(name, Node)},
    {type, proplists:get_value(type, Node)}
  ]}
`;

type <- 'uint8' / 'int32' / 'float' / 'string'
`
   list_to_atom(binary_to_list(iolist_to_binary(Node)))
`;

label <- [a-z]+ [0-9a-z]* 
`
  iolist_to_binary(Node)
`;

digit <- [0-9]+ ~;

crlf <- ([\r]? [\n])+ 
`
  crlf
`;

sp <- [\s\t]* ~;
